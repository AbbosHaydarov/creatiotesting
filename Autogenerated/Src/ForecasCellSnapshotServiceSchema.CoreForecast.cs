namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: ForecasCellSnapshotServiceSchema

	/// <exclude/>
	public class ForecasCellSnapshotServiceSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecasCellSnapshotServiceSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecasCellSnapshotServiceSchema(ForecasCellSnapshotServiceSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("0a4e18d5-1a74-0dac-6ca8-5600330c0b01");
			Name = "ForecasCellSnapshotService";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,181,87,109,143,218,70,16,254,76,164,252,135,41,145,34,35,33,35,245,99,56,19,93,185,144,34,165,233,169,180,249,82,85,209,158,61,6,171,102,77,119,215,68,40,225,191,119,246,205,111,216,208,83,219,251,192,121,199,243,182,207,51,51,222,229,108,143,242,192,98,132,95,81,8,38,139,84,133,203,130,167,217,182,20,76,101,5,15,87,133,192,152,73,245,233,251,151,47,190,190,124,49,42,101,198,183,176,57,73,133,123,82,205,115,140,181,158,12,223,35,71,145,197,243,174,206,135,140,255,85,11,155,97,246,251,130,247,191,17,56,36,15,87,44,86,133,200,80,146,6,233,188,18,184,165,240,176,204,153,148,111,192,101,187,196,60,127,199,85,166,78,27,206,14,114,87,168,13,138,99,22,163,177,153,205,102,112,39,203,253,158,137,211,194,173,221,123,72,11,1,146,29,117,96,233,76,141,44,117,48,64,76,174,101,232,189,204,26,110,126,127,192,148,149,185,250,33,227,9,217,7,234,116,192,34,13,214,30,193,222,132,38,83,248,72,28,64,4,99,157,180,28,79,254,32,87,135,242,41,207,98,136,245,166,154,123,234,24,195,27,184,238,157,92,17,103,244,91,225,180,202,48,79,8,168,71,145,29,153,178,120,140,14,118,1,235,247,168,188,63,29,238,23,60,20,50,35,184,79,240,153,96,47,89,67,50,111,25,174,185,68,49,104,187,203,164,230,44,102,185,213,27,242,114,37,124,237,98,200,216,91,110,44,35,84,154,229,158,47,89,30,151,57,35,109,248,44,251,95,216,58,26,189,66,158,88,140,28,38,150,130,97,240,131,223,104,43,212,43,220,54,0,148,173,229,4,116,179,140,70,29,165,168,163,102,182,112,110,83,244,40,138,3,129,68,37,174,105,42,20,105,98,226,137,114,75,232,248,237,44,191,194,22,213,28,164,254,57,119,77,43,160,220,126,30,152,98,224,23,125,166,93,104,122,19,53,112,117,67,221,36,101,72,110,193,163,76,220,211,72,160,42,5,31,36,17,222,190,181,122,163,96,80,37,178,67,194,14,144,19,205,43,117,119,43,191,69,48,153,24,138,52,71,244,43,235,132,174,132,57,178,188,196,134,217,185,85,81,87,170,252,222,244,152,153,3,13,233,32,22,221,150,36,16,32,184,148,246,237,123,48,135,69,48,182,89,140,167,14,80,142,95,128,74,75,42,81,106,7,247,98,91,238,145,171,96,220,174,228,241,180,83,132,147,30,232,122,114,246,112,193,243,160,250,177,154,7,164,115,19,177,44,37,96,250,70,8,68,17,240,50,207,125,187,18,175,253,106,207,196,208,166,119,170,64,252,23,40,206,171,194,238,205,140,73,88,251,230,157,132,27,108,181,117,80,189,113,94,206,237,10,26,156,170,109,210,6,32,185,66,220,213,239,65,205,157,85,123,46,125,221,143,200,85,18,47,149,123,168,188,150,238,255,207,230,69,138,255,17,167,189,31,219,33,102,123,112,234,225,119,232,83,240,19,170,93,49,120,174,208,128,210,201,131,39,250,33,88,191,227,132,150,96,79,57,222,105,193,2,234,44,76,41,76,173,129,29,21,250,209,19,235,182,216,81,15,87,153,144,234,103,225,142,95,129,62,161,65,164,79,100,244,167,23,225,35,29,76,139,100,157,232,66,169,189,214,226,215,175,27,202,118,160,95,40,87,226,150,178,61,117,93,40,123,177,165,232,220,70,227,33,75,83,183,113,42,62,189,234,129,164,118,70,112,220,68,204,3,116,100,2,226,29,227,91,52,80,75,34,81,151,234,7,210,182,134,129,43,26,125,156,101,241,14,130,14,210,144,241,102,232,170,163,158,138,34,247,158,201,105,202,114,233,190,112,38,166,77,231,100,60,68,53,211,23,188,54,40,157,215,173,221,178,238,182,114,219,117,237,192,55,82,157,20,53,35,182,91,162,126,231,159,190,125,107,230,26,126,210,21,14,223,181,184,51,178,70,118,206,180,206,168,9,112,120,159,36,193,229,174,108,124,251,171,241,73,136,100,199,69,131,125,231,112,73,84,168,102,150,198,179,245,48,111,214,189,246,50,127,86,51,54,14,101,221,75,143,189,245,176,35,202,206,221,166,190,247,20,169,9,137,2,57,221,53,158,80,125,65,244,229,1,140,39,64,115,84,213,234,213,205,232,242,106,100,37,7,38,216,30,56,93,119,162,177,183,26,47,170,147,231,30,21,75,104,192,133,119,51,163,217,111,152,102,185,66,49,94,172,204,127,136,91,151,213,166,165,251,20,29,139,44,49,251,244,113,130,222,243,175,207,103,10,214,177,189,4,131,141,230,185,247,74,225,114,135,241,159,126,234,127,164,122,13,116,114,116,217,243,26,126,208,87,22,155,29,226,63,176,179,122,222,186,130,38,170,242,155,87,53,37,181,102,227,141,53,173,223,91,50,163,254,67,165,254,236,25,81,96,220,76,253,70,231,149,121,167,119,201,209,181,35,215,109,127,186,146,188,39,63,246,76,138,211,139,97,102,141,110,156,18,194,134,212,7,173,98,132,174,167,90,243,183,211,46,86,218,22,146,236,111,98,171,217,162,18,17,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("0a4e18d5-1a74-0dac-6ca8-5600330c0b01"));
		}

		#endregion

	}

	#endregion

}

