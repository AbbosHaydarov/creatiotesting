namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: ForecastSnapshotExecutorSchema

	/// <exclude/>
	public class ForecastSnapshotExecutorSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastSnapshotExecutorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastSnapshotExecutorSchema(ForecastSnapshotExecutorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("116770b7-d605-0dde-2869-eb7e844280ad");
			Name = "ForecastSnapshotExecutor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,10,133,84,193,138,219,48,16,61,59,144,127,24,188,61,216,16,28,232,49,113,178,148,180,89,92,186,80,200,110,47,165,44,138,61,118,188,216,82,144,228,180,33,236,191,119,100,217,142,99,214,236,197,72,163,247,198,79,51,111,4,156,149,168,142,44,70,120,66,41,153,18,169,14,54,130,167,121,86,73,166,115,193,131,173,144,24,51,165,127,125,158,78,46,211,137,83,169,156,103,144,21,98,207,138,197,98,35,202,146,64,63,68,150,81,120,217,157,239,206,74,99,57,220,83,234,162,192,216,228,85,193,3,114,148,121,124,197,244,21,72,28,139,7,91,22,107,33,115,84,132,32,204,157,196,140,242,193,166,96,74,45,160,149,187,227,236,168,14,66,127,251,135,113,69,248,26,59,159,207,33,84,85,89,50,121,94,55,123,11,64,5,105,195,4,213,80,181,249,249,171,216,7,45,115,62,160,134,10,145,21,74,64,44,49,93,185,3,157,209,119,177,111,255,238,194,220,144,142,213,190,200,99,136,141,212,81,165,176,128,62,149,104,166,236,221,61,183,57,22,9,93,244,167,204,79,76,99,125,47,231,104,55,160,52,53,45,6,137,44,17,188,56,67,68,141,129,151,130,62,43,160,229,35,227,44,67,73,165,215,166,99,40,195,49,17,107,207,95,246,19,71,67,96,147,10,94,210,247,15,108,115,156,59,228,137,21,222,10,21,154,12,128,9,60,43,148,228,52,110,237,48,220,94,32,67,189,4,101,62,111,67,234,168,152,177,120,93,64,135,50,54,43,71,162,174,36,31,21,15,247,247,22,231,120,163,144,149,117,156,117,227,217,148,52,28,211,181,246,56,254,5,186,157,210,178,50,240,47,50,171,74,228,218,115,171,155,107,187,179,65,29,124,223,182,193,161,26,212,159,190,19,30,81,31,68,109,133,218,86,246,112,104,241,91,143,147,155,65,28,177,25,237,14,223,55,182,141,28,153,100,37,152,215,97,53,212,184,126,58,32,152,24,196,93,48,8,231,53,227,253,4,245,26,53,74,101,201,215,253,13,175,153,142,147,200,147,86,177,55,176,197,173,148,25,68,95,243,122,69,218,67,42,46,13,236,12,196,254,149,142,215,189,191,248,77,219,79,76,118,83,30,37,212,65,239,161,202,19,255,10,252,237,182,29,140,18,247,143,173,252,64,193,106,160,193,130,204,136,5,17,79,133,247,169,75,209,189,35,102,42,37,249,54,232,252,25,37,139,203,85,200,155,219,52,121,196,62,193,142,157,176,141,121,87,222,12,140,173,182,121,65,210,237,155,237,249,254,116,178,252,80,15,205,228,199,106,90,179,221,14,176,141,222,6,41,246,31,250,72,39,171,72,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("116770b7-d605-0dde-2869-eb7e844280ad"));
		}

		#endregion

	}

	#endregion

}

